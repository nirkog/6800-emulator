/// All 6800 opcodes
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Opcode {
    AddBToA,
    AddWithCarry,
    Add,
    And,
    ArithmeticShiftLeft,
    ArithmeticShiftRight,
    BranchIfCarryClear,
    BranchIfCarrySet,
    BranchIfEqual,
    BranchIfGreaterThanEqual,
    BranchIfGreaterThan,
    BranchIfHigherThan,
    BitTest,
    BranchIfLessThanEqaul,
    BranchIfLowerThanEqual,
    BranchIfLessThan,
    BranchIfMinus,
    BranchIfNotEqual,
    BranchIfPlus,
    BranchUnconditional,
    BranchToSubroutine,
    BranchIfOverflowClear,
    BranchIfOverflowSet,
    CompareAAndB,
    ClearCarryFlag,
    ClearInterruptMask,
    Clear,
    ClearOverflowFlag,
    Compare,
    Complement,
    CompareIndexRegister,
    DecimalAdjustA,
    Decrement,
    DecrementStackPointer,
    DecrementIndexRegister,
    Xor,
    Increment,
    IncrementStackPointer,
    IncrementIndexRegister,
    Jump,
    JumpToSubroutine,
    LoadAccumulator,
    LoadStackPointer,
    LoadIndexRegister,
    LogicalShiftRight,
    Negate,
    Nop,
    Or,
    Push,
    Pop,
    RotateLeft,
    RotateRight,
    ReturnFromInterrupt,
    Return,
    SubtractBFromA,
    SubtractWithCarry,
    SetCarryFlag,
    SetInterruptMask,
    SetOverflowFlag,
    StoreAccumulator,
    StoreStackPointer,
    StoreIndexRegister,
    Subtract,
    SoftwareInterrupt,
    TransferAToB,
    TransferAToConditionCodes,
    TransferBToA,
    TransferConditionCodesToA,
    Test,
    TransferStackPointerToIndexRegister,
    TransferIndexRegisterToStackPointer,
    WaitForInterrupt,
}

/// Opcode groups that group together opcodes with different codes but similar meaning
#[derive(Debug, PartialEq, Eq)]
pub enum OpcodeGroup {
    Subtract,
    Add,
    TransferRegisters,
    Increment,
    Decrement,
    ClearFlag,
    SetFlag,
    Compare,
    Branch,
    BitwiseArithmetic,
    Load,
    Store,
    Jump,
    StackOperations,
    Misc,
}

/// All possible operand types
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
pub enum OperandType {
    AccumulatorA,
    AccumulatorB,
    IndexRegister,
    Immediate8(u8),
    Immediate16(u16),
    ConditionCodeRegister,
    StackPointer
}

/// Addressing Mode (indexed, direct, immediate, relative, inherent, extended)
#[derive(Debug, PartialEq, Eq)]
pub enum AddressingMode {
    Inherent,
    Accumulator,
    Immediate,
    Direct,
    Extended,
    Relative,
    Indexed
}

/// Contains basic information about an opcode
#[derive(Debug)]
pub struct OpcodeInfo {
    pub opcode: Opcode,
    pub group: OpcodeGroup,
    pub instruction_length: u8,
    pub cycles: u8,
    pub addressing_mode: AddressingMode,
    pub increment_program_counter: bool
}

/// Containts the disassembled information about an instruction
#[derive(Debug)]
pub struct InstructionInfo {
    pub opcode_info: OpcodeInfo,
    pub operands: Option<Vec<OperandType>>
}

/// Errors that can arise during disassembly
#[derive(Debug, PartialEq, Eq)]
pub enum DisassemblyError {
    InvalidOpcodeByte,
    MachineCodeTooShort
}

/// Match a byte to its disassembled opcode
///
/// # Errors
/// The function might return an InvalidOpcodeByte error if an invalid byte was given (
/// A byte that does not correspond to any opcode).
fn match_byte_to_opcode_info(byte: u8) -> Result<OpcodeInfo, DisassemblyError> {
    // TODO: One opcode for all addressing mode, probably makes group redundant
    let opcode_info: OpcodeInfo = match byte {
        0x01 => OpcodeInfo { opcode: Opcode::Nop, group: OpcodeGroup::Misc, instruction_length: 1, cycles: 1, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x06 => OpcodeInfo { opcode: Opcode::TransferAToConditionCodes, group: OpcodeGroup::TransferRegisters, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x07 => OpcodeInfo { opcode: Opcode::TransferConditionCodesToA, group: OpcodeGroup::TransferRegisters, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x08 => OpcodeInfo { opcode: Opcode::IncrementIndexRegister, group: OpcodeGroup::Increment, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x09 => OpcodeInfo { opcode: Opcode::DecrementIndexRegister, group: OpcodeGroup::Decrement, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x0A => OpcodeInfo { opcode: Opcode::ClearOverflowFlag, group: OpcodeGroup::ClearFlag, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x0B => OpcodeInfo { opcode: Opcode::SetOverflowFlag, group: OpcodeGroup::SetFlag, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x0C => OpcodeInfo { opcode: Opcode::ClearCarryFlag, group: OpcodeGroup::ClearFlag, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x0D => OpcodeInfo { opcode: Opcode::SetCarryFlag, group: OpcodeGroup::SetFlag, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x0E => OpcodeInfo { opcode: Opcode::ClearInterruptMask, group: OpcodeGroup::ClearFlag, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x0F => OpcodeInfo { opcode: Opcode::SetInterruptMask, group: OpcodeGroup::SetFlag, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x10 => OpcodeInfo { opcode: Opcode::SubtractBFromA, group: OpcodeGroup::Subtract, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x11 => OpcodeInfo { opcode: Opcode::CompareAAndB, group: OpcodeGroup::Compare, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x16 => OpcodeInfo { opcode: Opcode::TransferAToB, group: OpcodeGroup::TransferRegisters, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x17 => OpcodeInfo { opcode: Opcode::TransferBToA, group: OpcodeGroup::TransferRegisters, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x19 => OpcodeInfo { opcode: Opcode::DecimalAdjustA, group: OpcodeGroup::TransferRegisters, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x1B => OpcodeInfo { opcode: Opcode::AddBToA, group: OpcodeGroup::Add, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x20 => OpcodeInfo { opcode: Opcode::BranchUnconditional, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative, increment_program_counter: false },
        0x22 => OpcodeInfo { opcode: Opcode::BranchIfHigherThan, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative, increment_program_counter: false },
        0x23 => OpcodeInfo { opcode: Opcode::BranchIfLowerThanEqual, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative, increment_program_counter: false },
        0x24 => OpcodeInfo { opcode: Opcode::BranchIfCarryClear, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative, increment_program_counter: false },
        0x25 => OpcodeInfo { opcode: Opcode::BranchIfCarrySet, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative, increment_program_counter: false },
        0x26 => OpcodeInfo { opcode: Opcode::BranchIfNotEqual, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative, increment_program_counter: false },
        0x27 => OpcodeInfo { opcode: Opcode::BranchIfEqual, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative, increment_program_counter: false },
        0x28 => OpcodeInfo { opcode: Opcode::BranchIfOverflowClear, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative, increment_program_counter: false },
        0x29 => OpcodeInfo { opcode: Opcode::BranchIfOverflowSet, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative, increment_program_counter: false },
        0x2A => OpcodeInfo { opcode: Opcode::BranchIfPlus, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative, increment_program_counter: false },
        0x2B => OpcodeInfo { opcode: Opcode::BranchIfMinus, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative, increment_program_counter: false },
        0x2C => OpcodeInfo { opcode: Opcode::BranchIfGreaterThanEqual, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative, increment_program_counter: false },
        0x2D => OpcodeInfo { opcode: Opcode::BranchIfLessThan, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative, increment_program_counter: false },
        0x2E => OpcodeInfo { opcode: Opcode::BranchIfGreaterThan, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative, increment_program_counter: false },
        0x2F => OpcodeInfo { opcode: Opcode::BranchIfLessThanEqaul, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative, increment_program_counter: false },
        0x30 => OpcodeInfo { opcode: Opcode::TransferStackPointerToIndexRegister, group: OpcodeGroup::TransferRegisters, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x31 => OpcodeInfo { opcode: Opcode::IncrementStackPointer, group: OpcodeGroup::Increment, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x32 => OpcodeInfo { opcode: Opcode::Pop, group: OpcodeGroup::StackOperations, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x33 => OpcodeInfo { opcode: Opcode::Pop, group: OpcodeGroup::StackOperations, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x34 => OpcodeInfo { opcode: Opcode::DecrementStackPointer, group: OpcodeGroup::Decrement, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x35 => OpcodeInfo { opcode: Opcode::TransferIndexRegisterToStackPointer, group: OpcodeGroup::TransferRegisters, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x36 => OpcodeInfo { opcode: Opcode::Push, group: OpcodeGroup::StackOperations, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x37 => OpcodeInfo { opcode: Opcode::Push, group: OpcodeGroup::StackOperations, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x39 => OpcodeInfo { opcode: Opcode::Return, group: OpcodeGroup::Misc, instruction_length: 1, cycles: 5, addressing_mode: AddressingMode::Inherent, increment_program_counter: false },
        0x3B => OpcodeInfo { opcode: Opcode::ReturnFromInterrupt, group: OpcodeGroup::Misc, instruction_length: 1, cycles: 10, addressing_mode: AddressingMode::Inherent, increment_program_counter: false },
        0x3E => OpcodeInfo { opcode: Opcode::WaitForInterrupt, group: OpcodeGroup::Misc, instruction_length: 1, cycles: 9, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x3F => OpcodeInfo { opcode: Opcode::SoftwareInterrupt, group: OpcodeGroup::Misc, instruction_length: 1, cycles: 12, addressing_mode: AddressingMode::Inherent, increment_program_counter: true },
        0x40 => OpcodeInfo { opcode: Opcode::Negate, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x43 => OpcodeInfo { opcode: Opcode::Complement, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x44 => OpcodeInfo { opcode: Opcode::LogicalShiftRight, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x46 => OpcodeInfo { opcode: Opcode::RotateRight, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x47 => OpcodeInfo { opcode: Opcode::ArithmeticShiftRight, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x48 => OpcodeInfo { opcode: Opcode::ArithmeticShiftLeft, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x49 => OpcodeInfo { opcode: Opcode::RotateLeft, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x4A => OpcodeInfo { opcode: Opcode::Decrement, group: OpcodeGroup::Decrement, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x4C => OpcodeInfo { opcode: Opcode::Increment, group: OpcodeGroup::Increment, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x4D => OpcodeInfo { opcode: Opcode::Test, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x4F => OpcodeInfo { opcode: Opcode::Clear, group: OpcodeGroup::Misc, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x50 => OpcodeInfo { opcode: Opcode::Negate, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x53 => OpcodeInfo { opcode: Opcode::Complement, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x54 => OpcodeInfo { opcode: Opcode::LogicalShiftRight, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x56 => OpcodeInfo { opcode: Opcode::RotateRight, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x57 => OpcodeInfo { opcode: Opcode::ArithmeticShiftRight, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x58 => OpcodeInfo { opcode: Opcode::ArithmeticShiftLeft, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x59 => OpcodeInfo { opcode: Opcode::RotateLeft, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x5A => OpcodeInfo { opcode: Opcode::Decrement, group: OpcodeGroup::Decrement, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x5C => OpcodeInfo { opcode: Opcode::Increment, group: OpcodeGroup::Increment, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x5D => OpcodeInfo { opcode: Opcode::Test, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x5F => OpcodeInfo { opcode: Opcode::Clear, group: OpcodeGroup::Misc, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Accumulator, increment_program_counter: true },
        0x60 => OpcodeInfo { opcode: Opcode::Negate, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0x63 => OpcodeInfo { opcode: Opcode::Complement, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0x64 => OpcodeInfo { opcode: Opcode::LogicalShiftRight, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0x66 => OpcodeInfo { opcode: Opcode::RotateRight, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0x67 => OpcodeInfo { opcode: Opcode::ArithmeticShiftRight, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0x68 => OpcodeInfo { opcode: Opcode::ArithmeticShiftLeft, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0x69 => OpcodeInfo { opcode: Opcode::RotateLeft, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0x6A => OpcodeInfo { opcode: Opcode::Decrement, group: OpcodeGroup::Decrement, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0x6C => OpcodeInfo { opcode: Opcode::Increment, group: OpcodeGroup::Increment, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0x6D => OpcodeInfo { opcode: Opcode::Test, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0x6E => OpcodeInfo { opcode: Opcode::Jump, group: OpcodeGroup::Jump, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Indexed, increment_program_counter: false },
        0x6F => OpcodeInfo { opcode: Opcode::Clear, group: OpcodeGroup::Misc, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0x70 => OpcodeInfo { opcode: Opcode::Negate, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0x73 => OpcodeInfo { opcode: Opcode::Complement, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0x74 => OpcodeInfo { opcode: Opcode::LogicalShiftRight, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0x76 => OpcodeInfo { opcode: Opcode::RotateRight, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0x77 => OpcodeInfo { opcode: Opcode::ArithmeticShiftRight, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0x78 => OpcodeInfo { opcode: Opcode::ArithmeticShiftLeft, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0x79 => OpcodeInfo { opcode: Opcode::RotateLeft, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0x7A => OpcodeInfo { opcode: Opcode::Decrement, group: OpcodeGroup::Decrement, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0x7C => OpcodeInfo { opcode: Opcode::Increment, group: OpcodeGroup::Increment, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0x7D => OpcodeInfo { opcode: Opcode::Test, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0x7E => OpcodeInfo { opcode: Opcode::Jump, group: OpcodeGroup::Jump, instruction_length: 3, cycles: 3, addressing_mode: AddressingMode::Extended, increment_program_counter: false },
        0x7F => OpcodeInfo { opcode: Opcode::Clear, group: OpcodeGroup::Misc, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0x80 => OpcodeInfo { opcode: Opcode::Subtract, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0x81 => OpcodeInfo { opcode: Opcode::Compare, group: OpcodeGroup::Compare, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate , increment_program_counter: true },
        0x82 => OpcodeInfo { opcode: Opcode::SubtractWithCarry, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0x84 => OpcodeInfo { opcode: Opcode::And, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0x85 => OpcodeInfo { opcode: Opcode::BitTest, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0x86 => OpcodeInfo { opcode: Opcode::LoadAccumulator, group: OpcodeGroup::Load, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0x88 => OpcodeInfo { opcode: Opcode::Xor, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0x89 => OpcodeInfo { opcode: Opcode::AddWithCarry, group: OpcodeGroup::Add, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0x8A => OpcodeInfo { opcode: Opcode::Or, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0x8B => OpcodeInfo { opcode: Opcode::Add, group: OpcodeGroup::Add, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate , increment_program_counter: true },
        0x8C => OpcodeInfo { opcode: Opcode::CompareIndexRegister, group: OpcodeGroup::Compare, instruction_length: 3, cycles: 3, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0x8D => OpcodeInfo { opcode: Opcode::BranchToSubroutine, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 8, addressing_mode: AddressingMode::Relative, increment_program_counter: false },
        0x8E => OpcodeInfo { opcode: Opcode::LoadStackPointer, group: OpcodeGroup::Load, instruction_length: 3, cycles: 3, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0x90 => OpcodeInfo { opcode: Opcode::Subtract, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0x91 => OpcodeInfo { opcode: Opcode::Compare, group: OpcodeGroup::Compare, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0x92 => OpcodeInfo { opcode: Opcode::SubtractWithCarry, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct , increment_program_counter: true },
        0x94 => OpcodeInfo { opcode: Opcode::And, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0x95 => OpcodeInfo { opcode: Opcode::BitTest, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0x96 => OpcodeInfo { opcode: Opcode::LoadAccumulator, group: OpcodeGroup::Load, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0x97 => OpcodeInfo { opcode: Opcode::StoreAccumulator, group: OpcodeGroup::Store, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Direct , increment_program_counter: true },
        0x98 => OpcodeInfo { opcode: Opcode::Xor, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0x99 => OpcodeInfo { opcode: Opcode::AddWithCarry, group: OpcodeGroup::Add, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0x9A => OpcodeInfo { opcode: Opcode::Or, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0x9B => OpcodeInfo { opcode: Opcode::Add, group: OpcodeGroup::Add, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0x9C => OpcodeInfo { opcode: Opcode::CompareIndexRegister, group: OpcodeGroup::Compare, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0x9E => OpcodeInfo { opcode: Opcode::LoadStackPointer, group: OpcodeGroup::Load, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0x9F => OpcodeInfo { opcode: Opcode::StoreStackPointer, group: OpcodeGroup::Store, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0xA0 => OpcodeInfo { opcode: Opcode::Subtract, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed , increment_program_counter: true },
        0xA1 => OpcodeInfo { opcode: Opcode::Compare, group: OpcodeGroup::Compare, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0xA2 => OpcodeInfo { opcode: Opcode::SubtractWithCarry, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0xA4 => OpcodeInfo { opcode: Opcode::And, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed , increment_program_counter: true },
        0xA5 => OpcodeInfo { opcode: Opcode::BitTest, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed , increment_program_counter: true },
        0xA6 => OpcodeInfo { opcode: Opcode::LoadAccumulator, group: OpcodeGroup::Load, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0xA7 => OpcodeInfo { opcode: Opcode::StoreAccumulator, group: OpcodeGroup::Store, instruction_length: 2, cycles: 6, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0xA8 => OpcodeInfo { opcode: Opcode::Xor, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed , increment_program_counter: true },
        0xA9 => OpcodeInfo { opcode: Opcode::AddWithCarry, group: OpcodeGroup::Add, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0xAA => OpcodeInfo { opcode: Opcode::Or, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0xAB => OpcodeInfo { opcode: Opcode::Add, group: OpcodeGroup::Add, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0xAC => OpcodeInfo { opcode: Opcode::CompareIndexRegister, group: OpcodeGroup::Compare, instruction_length: 2, cycles: 6, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0xAD => OpcodeInfo { opcode: Opcode::JumpToSubroutine, group: OpcodeGroup::Jump, instruction_length: 2, cycles: 8, addressing_mode: AddressingMode::Indexed , increment_program_counter: false },
        0xAE => OpcodeInfo { opcode: Opcode::LoadStackPointer, group: OpcodeGroup::Load, instruction_length: 2, cycles: 6, addressing_mode: AddressingMode::Indexed , increment_program_counter: true },
        0xAF => OpcodeInfo { opcode: Opcode::StoreStackPointer, group: OpcodeGroup::Store, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0xB0 => OpcodeInfo { opcode: Opcode::Subtract, group: OpcodeGroup::Subtract, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xB1 => OpcodeInfo { opcode: Opcode::Compare, group: OpcodeGroup::Compare, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xB2 => OpcodeInfo { opcode: Opcode::SubtractWithCarry, group: OpcodeGroup::Subtract, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xB4 => OpcodeInfo { opcode: Opcode::And, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xB5 => OpcodeInfo { opcode: Opcode::BitTest, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xB6 => OpcodeInfo { opcode: Opcode::LoadAccumulator, group: OpcodeGroup::Load, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended , increment_program_counter: true },
        0xB7 => OpcodeInfo { opcode: Opcode::StoreAccumulator, group: OpcodeGroup::Store, instruction_length: 3, cycles: 5, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xB8 => OpcodeInfo { opcode: Opcode::Xor, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xB9 => OpcodeInfo { opcode: Opcode::AddWithCarry, group: OpcodeGroup::Add, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended , increment_program_counter: true },
        0xBA => OpcodeInfo { opcode: Opcode::Or, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended , increment_program_counter: true },
        0xBB => OpcodeInfo { opcode: Opcode::Add, group: OpcodeGroup::Add, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xBC => OpcodeInfo { opcode: Opcode::CompareIndexRegister, group: OpcodeGroup::Compare, instruction_length: 3, cycles: 5, addressing_mode: AddressingMode::Extended , increment_program_counter: true },
        0xBD => OpcodeInfo { opcode: Opcode::JumpToSubroutine, group: OpcodeGroup::Jump, instruction_length: 3, cycles: 9, addressing_mode: AddressingMode::Extended, increment_program_counter: false },
        0xBE => OpcodeInfo { opcode: Opcode::LoadStackPointer, group: OpcodeGroup::Load, instruction_length: 3, cycles: 5, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xBF => OpcodeInfo { opcode: Opcode::StoreStackPointer, group: OpcodeGroup::Store, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xC0 => OpcodeInfo { opcode: Opcode::Subtract, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0xC1 => OpcodeInfo { opcode: Opcode::Compare, group: OpcodeGroup::Compare, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate , increment_program_counter: true },
        0xC2 => OpcodeInfo { opcode: Opcode::SubtractWithCarry, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0xC4 => OpcodeInfo { opcode: Opcode::And, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0xC5 => OpcodeInfo { opcode: Opcode::BitTest, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0xC6 => OpcodeInfo { opcode: Opcode::LoadAccumulator, group: OpcodeGroup::Load, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0xC8 => OpcodeInfo { opcode: Opcode::Xor, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0xC9 => OpcodeInfo { opcode: Opcode::AddWithCarry, group: OpcodeGroup::Add, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0xCA => OpcodeInfo { opcode: Opcode::Or, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0xCB => OpcodeInfo { opcode: Opcode::Add, group: OpcodeGroup::Add, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate , increment_program_counter: true },
        0xCE => OpcodeInfo { opcode: Opcode::LoadIndexRegister, group: OpcodeGroup::Load, instruction_length: 3, cycles: 3, addressing_mode: AddressingMode::Immediate, increment_program_counter: true },
        0xD0 => OpcodeInfo { opcode: Opcode::Subtract, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0xD1 => OpcodeInfo { opcode: Opcode::Compare, group: OpcodeGroup::Compare, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0xD2 => OpcodeInfo { opcode: Opcode::SubtractWithCarry, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0xD4 => OpcodeInfo { opcode: Opcode::And, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0xD5 => OpcodeInfo { opcode: Opcode::BitTest, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0xD6 => OpcodeInfo { opcode: Opcode::LoadAccumulator, group: OpcodeGroup::Load, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0xD7 => OpcodeInfo { opcode: Opcode::StoreAccumulator, group: OpcodeGroup::Store, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0xD8 => OpcodeInfo { opcode: Opcode::Xor, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0xD9 => OpcodeInfo { opcode: Opcode::AddWithCarry, group: OpcodeGroup::Add, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0xDA => OpcodeInfo { opcode: Opcode::Or, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0xDB => OpcodeInfo { opcode: Opcode::Add, group: OpcodeGroup::Add, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0xDE => OpcodeInfo { opcode: Opcode::LoadIndexRegister, group: OpcodeGroup::Load, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Direct , increment_program_counter: true },
        0xDF => OpcodeInfo { opcode: Opcode::StoreIndexRegister, group: OpcodeGroup::Store, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Direct, increment_program_counter: true },
        0xE0 => OpcodeInfo { opcode: Opcode::Subtract, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed , increment_program_counter: true },
        0xE1 => OpcodeInfo { opcode: Opcode::Compare, group: OpcodeGroup::Compare, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0xE2 => OpcodeInfo { opcode: Opcode::SubtractWithCarry, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0xE4 => OpcodeInfo { opcode: Opcode::And, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed , increment_program_counter: true },
        0xE5 => OpcodeInfo { opcode: Opcode::BitTest, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed , increment_program_counter: true },
        0xE6 => OpcodeInfo { opcode: Opcode::LoadAccumulator, group: OpcodeGroup::Load, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0xE7 => OpcodeInfo { opcode: Opcode::StoreAccumulator, group: OpcodeGroup::Store, instruction_length: 2, cycles: 6, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0xE8 => OpcodeInfo { opcode: Opcode::Xor, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed , increment_program_counter: true },
        0xE9 => OpcodeInfo { opcode: Opcode::AddWithCarry, group: OpcodeGroup::Add, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0xEA => OpcodeInfo { opcode: Opcode::Or, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0xEB => OpcodeInfo { opcode: Opcode::Add, group: OpcodeGroup::Add, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0xEE => OpcodeInfo { opcode: Opcode::LoadIndexRegister, group: OpcodeGroup::Load, instruction_length: 2, cycles: 6, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0xEF => OpcodeInfo { opcode: Opcode::StoreIndexRegister, group: OpcodeGroup::Store, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed, increment_program_counter: true },
        0xF0 => OpcodeInfo { opcode: Opcode::Subtract, group: OpcodeGroup::Subtract, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xF1 => OpcodeInfo { opcode: Opcode::Compare, group: OpcodeGroup::Compare, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xF2 => OpcodeInfo { opcode: Opcode::SubtractWithCarry, group: OpcodeGroup::Subtract, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xF4 => OpcodeInfo { opcode: Opcode::And, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xF5 => OpcodeInfo { opcode: Opcode::BitTest, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xF6 => OpcodeInfo { opcode: Opcode::LoadAccumulator, group: OpcodeGroup::Load, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended , increment_program_counter: true },
        0xF7 => OpcodeInfo { opcode: Opcode::StoreAccumulator, group: OpcodeGroup::Store, instruction_length: 3, cycles: 5, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xF8 => OpcodeInfo { opcode: Opcode::Xor, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xF9 => OpcodeInfo { opcode: Opcode::AddWithCarry, group: OpcodeGroup::Add, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended , increment_program_counter: true },
        0xFA => OpcodeInfo { opcode: Opcode::Or, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended , increment_program_counter: true },
        0xFB => OpcodeInfo { opcode: Opcode::Add, group: OpcodeGroup::Add, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xFE => OpcodeInfo { opcode: Opcode::LoadIndexRegister, group: OpcodeGroup::Load, instruction_length: 3, cycles: 5, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        0xFF => OpcodeInfo { opcode: Opcode::StoreIndexRegister, group: OpcodeGroup::Store, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended, increment_program_counter: true },
        _ => return Err(DisassemblyError::InvalidOpcodeByte)
    };

    Ok(opcode_info)
}

fn disassemble_operands(data: &[u8]) -> Option<Vec<OperandType>> {
    let mut operand8: OperandType = OperandType::Immediate8(0);
    let mut operand16: OperandType = OperandType::Immediate16(0);

    if data.len() > 1 {
        operand8 = OperandType::Immediate8(data[1]);
    } 
    if data.len() > 2 {
        operand16 = OperandType::Immediate16(((data[1] as u16) << 8) | (data[2] as u16));
    }

    let operands = match data[0]{
        0x01 => None,
        0x06 => Some(vec![OperandType::AccumulatorA, OperandType::ConditionCodeRegister]),
        0x07 => Some(vec![OperandType::ConditionCodeRegister, OperandType::AccumulatorA]),
        0x08 => Some(vec![OperandType::IndexRegister]),
        0x09 => Some(vec![OperandType::IndexRegister]),
        0x0A => None,
        0x0B => None,
        0x0C => None,
        0x0D => None,
        0x0E => None,
        0x0F => None,
        0x10 => Some(vec![OperandType::AccumulatorA, OperandType::AccumulatorB]),
        0x11 => Some(vec![OperandType::AccumulatorA, OperandType::AccumulatorB]),
        0x16 => Some(vec![OperandType::AccumulatorA, OperandType::AccumulatorB]),
        0x17 => Some(vec![OperandType::AccumulatorB, OperandType::AccumulatorA]),
        0x19 => None,
        0x1A => Some(vec![OperandType::AccumulatorA, OperandType::AccumulatorB]),
        0x20 => Some(vec![operand8]),
        0x22 => Some(vec![operand8]),
        0x23 => Some(vec![operand8]),
        0x24 => Some(vec![operand8]),
        0x25 => Some(vec![operand8]),
        0x26 => Some(vec![operand8]),
        0x27 => Some(vec![operand8]),
        0x28 => Some(vec![operand8]),
        0x29 => Some(vec![operand8]),
        0x2A => Some(vec![operand8]),
        0x2B => Some(vec![operand8]),
        0x2C => Some(vec![operand8]),
        0x2D => Some(vec![operand8]),
        0x2E => Some(vec![operand8]),
        0x2F => Some(vec![operand8]),
        0x30 => Some(vec![OperandType::IndexRegister, OperandType::StackPointer]),
        0x31 => Some(vec![OperandType::StackPointer]),
        0x32 => Some(vec![OperandType::AccumulatorA]),
        0x33 => Some(vec![OperandType::AccumulatorB]),
        0x34 => Some(vec![OperandType::StackPointer]),
        0x35 => Some(vec![OperandType::StackPointer, OperandType::IndexRegister]),
        0x36 => Some(vec![OperandType::AccumulatorA]),
        0x37 => Some(vec![OperandType::AccumulatorB]),
        0x39 => None,
        0x3B => None,
        0x3E => None,
        0x3F => None,
        0x40 => Some(vec![OperandType::AccumulatorA]),
        0x43 => Some(vec![OperandType::AccumulatorA]),
        0x44 => Some(vec![OperandType::AccumulatorA]),
        0x46 => Some(vec![OperandType::AccumulatorA]),
        0x47 => Some(vec![OperandType::AccumulatorA]),
        0x48 => Some(vec![OperandType::AccumulatorA]),
        0x49 => Some(vec![OperandType::AccumulatorA]),
        0x4A => Some(vec![OperandType::AccumulatorA]),
        0x4C => Some(vec![OperandType::AccumulatorA]),
        0x4D => Some(vec![OperandType::AccumulatorA]),
        0x4F => Some(vec![OperandType::AccumulatorA]),
        0x50 => Some(vec![OperandType::AccumulatorB]),
        0x53 => Some(vec![OperandType::AccumulatorB]),
        0x54 => Some(vec![OperandType::AccumulatorB]),
        0x56 => Some(vec![OperandType::AccumulatorB]),
        0x57 => Some(vec![OperandType::AccumulatorB]),
        0x58 => Some(vec![OperandType::AccumulatorB]),
        0x59 => Some(vec![OperandType::AccumulatorB]),
        0x5A => Some(vec![OperandType::AccumulatorB]),
        0x5C => Some(vec![OperandType::AccumulatorB]),
        0x5D => Some(vec![OperandType::AccumulatorB]),
        0x5F => Some(vec![OperandType::AccumulatorB]),
        0x60 => Some(vec![operand8]),
        0x63 => Some(vec![operand8]),
        0x64 => Some(vec![operand8]),
        0x66 => Some(vec![operand8]),
        0x67 => Some(vec![operand8]),
        0x68 => Some(vec![operand8]),
        0x69 => Some(vec![operand8]),
        0x6A => Some(vec![operand8]),
        0x6C => Some(vec![operand8]),
        0x6D => Some(vec![operand8]),
        0x6E => Some(vec![operand8]),
        0x6F => Some(vec![operand8]),
        0x70 => Some(vec![operand16]),
        0x73 => Some(vec![operand16]),
        0x74 => Some(vec![operand16]),
        0x76 => Some(vec![operand16]),
        0x77 => Some(vec![operand16]),
        0x78 => Some(vec![operand16]),
        0x79 => Some(vec![operand16]),
        0x7A => Some(vec![operand16]),
        0x7C => Some(vec![operand16]),
        0x7D => Some(vec![operand16]),
        0x7E => Some(vec![operand16]),
        0x7F => Some(vec![operand16]),
        0x80 => Some(vec![OperandType::AccumulatorA, operand8]),
        0x81 => Some(vec![OperandType::AccumulatorA, operand8]),
        0x82 => Some(vec![OperandType::AccumulatorA, operand8]),
        0x84 => Some(vec![OperandType::AccumulatorA, operand8]),
        0x85 => Some(vec![OperandType::AccumulatorA, operand8]),
        0x86 => Some(vec![OperandType::AccumulatorA, operand8]),
        0x88 => Some(vec![OperandType::AccumulatorA, operand8]),
        0x89 => Some(vec![OperandType::AccumulatorA, operand8]),
        0x8A => Some(vec![OperandType::AccumulatorA, operand8]),
        0x8B => Some(vec![OperandType::AccumulatorA, operand8]),
        0x8C => Some(vec![OperandType::IndexRegister, operand16]),
        0x8D => Some(vec![operand8]),
        0x8E => Some(vec![OperandType::StackPointer, operand16]),
        0x90 => Some(vec![OperandType::AccumulatorA, operand8]),
        0x91 => Some(vec![OperandType::AccumulatorA, operand8]),
        0x92 => Some(vec![OperandType::AccumulatorA, operand8]),
        0x94 => Some(vec![OperandType::AccumulatorA, operand8]),
        0x95 => Some(vec![OperandType::AccumulatorA, operand8]),
        0x96 => Some(vec![OperandType::AccumulatorA, operand8]),
        0x97 => Some(vec![OperandType::AccumulatorA, operand8]),
        0x98 => Some(vec![OperandType::AccumulatorA, operand8]),
        0x99 => Some(vec![OperandType::AccumulatorA, operand8]),
        0x9A => Some(vec![OperandType::AccumulatorA, operand8]),
        0x9B => Some(vec![OperandType::AccumulatorA, operand8]),
        0x9C => Some(vec![OperandType::IndexRegister, operand16]),
        0x9E => Some(vec![OperandType::StackPointer, operand8]),
        0x9F => Some(vec![OperandType::StackPointer, operand8]),
        0xA0 => Some(vec![OperandType::AccumulatorA, operand8]),
        0xA1 => Some(vec![OperandType::AccumulatorA, operand8]),
        0xA2 => Some(vec![OperandType::AccumulatorA, operand8]),
        0xA4 => Some(vec![OperandType::AccumulatorA, operand8]),
        0xA5 => Some(vec![OperandType::AccumulatorA, operand8]),
        0xA6 => Some(vec![OperandType::AccumulatorA, operand8]),
        0xA7 => Some(vec![OperandType::AccumulatorA, operand8]),
        0xA8 => Some(vec![OperandType::AccumulatorA, operand8]),
        0xA9 => Some(vec![OperandType::AccumulatorA, operand8]),
        0xAA => Some(vec![OperandType::AccumulatorA, operand8]),
        0xAB => Some(vec![OperandType::AccumulatorA, operand8]),
        0xAC => Some(vec![OperandType::IndexRegister, operand8]),
        0xAD => Some(vec![operand8]),
        0xAE => Some(vec![OperandType::StackPointer, operand8]),
        0xAF => Some(vec![OperandType::StackPointer, operand8]),
        0xB0 => Some(vec![OperandType::AccumulatorA, operand16]),
        0xB1 => Some(vec![OperandType::AccumulatorA, operand16]),
        0xB2 => Some(vec![OperandType::AccumulatorA, operand16]),
        0xB4 => Some(vec![OperandType::AccumulatorA, operand16]),
        0xB5 => Some(vec![OperandType::AccumulatorA, operand16]),
        0xB6 => Some(vec![OperandType::AccumulatorA, operand16]),
        0xB7 => Some(vec![OperandType::AccumulatorA, operand16]),
        0xB8 => Some(vec![OperandType::AccumulatorA, operand16]),
        0xB9 => Some(vec![OperandType::AccumulatorA, operand16]),
        0xBA => Some(vec![OperandType::AccumulatorA, operand16]),
        0xBB => Some(vec![OperandType::AccumulatorA, operand16]),
        0xBC => Some(vec![OperandType::IndexRegister, operand16]),
        0xBD => Some(vec![operand16]),
        0xBE => Some(vec![OperandType::StackPointer, operand16]),
        0xBF => Some(vec![OperandType::StackPointer, operand16]),
        0xC0 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xC1 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xC2 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xC4 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xC5 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xC6 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xC8 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xC9 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xCA => Some(vec![OperandType::AccumulatorB, operand8]),
        0xCB => Some(vec![OperandType::AccumulatorB, operand8]),
        0xCE => Some(vec![OperandType::IndexRegister, operand16]),
        0xD0 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xD1 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xD2 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xD4 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xD5 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xD6 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xD7 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xD8 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xD9 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xDA => Some(vec![OperandType::AccumulatorB, operand8]),
        0xDB => Some(vec![OperandType::AccumulatorB, operand8]),
        0xDE => Some(vec![OperandType::IndexRegister, operand8]),
        0xDF => Some(vec![OperandType::IndexRegister, operand8]),
        0xE0 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xE1 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xE2 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xE4 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xE5 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xE6 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xE7 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xE8 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xE9 => Some(vec![OperandType::AccumulatorB, operand8]),
        0xEA => Some(vec![OperandType::AccumulatorB, operand8]),
        0xEB => Some(vec![OperandType::AccumulatorB, operand8]),
        0xEE => Some(vec![OperandType::IndexRegister, operand8]),
        0xEF => Some(vec![OperandType::IndexRegister, operand8]),
        0xF0 => Some(vec![OperandType::AccumulatorB, operand16]),
        0xF1 => Some(vec![OperandType::AccumulatorB, operand16]),
        0xF2 => Some(vec![OperandType::AccumulatorB, operand16]),
        0xF4 => Some(vec![OperandType::AccumulatorB, operand16]),
        0xF5 => Some(vec![OperandType::AccumulatorB, operand16]),
        0xF6 => Some(vec![OperandType::AccumulatorB, operand16]),
        0xF7 => Some(vec![OperandType::AccumulatorB, operand16]),
        0xF8 => Some(vec![OperandType::AccumulatorB, operand16]),
        0xF9 => Some(vec![OperandType::AccumulatorB, operand16]),
        0xFA => Some(vec![OperandType::AccumulatorB, operand16]),
        0xFB => Some(vec![OperandType::AccumulatorB, operand16]),
        0xFE => Some(vec![OperandType::IndexRegister, operand16]),
        0xFF => Some(vec![OperandType::IndexRegister, operand16]),
        _ => None
    };

    operands
}

/// Disassemble the next instruction in a byte stream
pub fn disassemble_instruction(data: &[u8]) -> Result<InstructionInfo, DisassemblyError> {
    let opcode_info = match data.len() {
        0 => return Err(DisassemblyError::MachineCodeTooShort),
        _ => match_byte_to_opcode_info(data[0])
    };
    
    let opcode_info = match opcode_info {
        Ok(info) => info,
        Err(err) => return Err(err)
    };

    // Return an error if data is too short for operands
    if data.len() < opcode_info.instruction_length as usize {
        return Err(DisassemblyError::MachineCodeTooShort);
    }

    let operands = disassemble_operands(data); 

    Ok(InstructionInfo { opcode_info, operands })
}
