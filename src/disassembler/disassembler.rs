/// All 6800 opcodes
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Opcode {
    Nop,
    TransferAToConditionCodes,
    TransferConditionCodesToA,
    IncrementIndexRegister,
    DecrementIndexRegister,
    ClearOverflowFlag,
    SetOverflowFlag,
    ClearCarryFlag,
    SetCarryFlag,
    ClearInterruptMask,
    SetInterruptMask,
    SubtractBFromA,
    CompareAAndB,
    TransferAToB,
    TransferBToA,
    DecimalAdjustA,
    AddBToA,
    BranchUnconditional,
    BranchIfHigherThan,
    BranchIfLessThanEqaul,
    BranchIfCarryClear,
    BranchIfCarrySet,
    BranchIfNotEqual,
    BranchIfEqual,
    BranchIfOverflowClear,
    BranchIfOverflowSet,
    BranchIfPlus,
    BranchIfMinus,
    BranchIfGreaterThanEqual,
    BranchIfLessThan,
    BranchIfGreaterThan,
    BranchIfLowerThanEqual,
    TransferStackPointerPlusOneToIndexRegister,
    IncrementStackPointer,
    PopA,
    PopB,
    DecrementStackPointer,
    TransferIndexRegisterMinusOneToStackPointer,
    PushA,
    PushB,
    Return,
    ReturnFromInterrupt,
    WaitForInterrupt,
    SoftwareInterrupt,
    NegateA,
    ComplementA,
    LogicalShiftRightA,
    RotateRightA,
    ArithmeticShiftRightA,
    ArithmeticShiftLeftA,
    RotateLeftA,
    DecrementA,
    IncrementA,
    TestA,
    ClearA,
    NegateB,
    ComplementB,
    LogicalShiftRightB,
    RotateRightB,
    ArithmeticShiftRightB,
    ArithmeticShiftLeftB,
    RotateLeftB,
    DecrementB,
    IncrementB,
    TestB,
    ClearB,
    NegateIndexed,
    ComplementIndexed,
    LogicalShiftRightIndexed,
    RotateRightIndexed,
    ArithmeticShiftRightIndexed,
    ArithmeticShiftLeftIndexed,
    RotateLeftIndexed,
    DecrementIndexed,
    IncrementIndexed,
    TestIndexed,
    JumpIndexed,
    ClearIndexed,
    NegateExtended,
    ComplementExtended,
    LogicalShiftRightExtended,
    RotateRightExtended,
    ArithmeticShiftRightExtended,
    ArithmeticShiftLeftExtended,
    RotateLeftExtended,
    DecrementExtended,
    IncrementExtended,
    TestExtended,
    JumpExtended,
    ClearExtended,
    SubtractAImmediate,
    CompareAImmediate,
    SubtractWithCarryAImmediate,
    AndAImmediate,
    BitTestAImmediate,
    LoadAImmediate,
    XorAImmediate,
    AddWithCarryAImmediate,
    OrAImmediate,
    AddAImmediate,
    CompareIndexRegisterImmediate,
    BranchToSubroutine,
    LoadStackPointerImmediate,
    SubtractADirect,
    CompareADirect,
    SubtractWithCarryADirect,
    AndADirect,
    BitTestADirect,
    LoadADirect,
    StoreADirect,
    XorADirect,
    AddWithCarryADirect,
    OrADirect,
    AddADirect,
    CompareIndexRegisterDirect,
    LoadStackPointerDirect,
    StoreStackPointerDirect,
    SubtractAIndexed,
    CompareAIndexed,
    SubtractWithCarryAIndexed,
    AndAIndexed,
    BitTestAIndexed,
    LoadAIndexed,
    StoreAIndexed,
    XorAIndexed,
    AddWithCarryAIndexed,
    OrAIndexed,
    AddAIndexed,
    CompareIndexRegisterIndexed,
    JumpToSubroutineIndexed,
    LoadStackPointerIndexed,
    StoreStackPointerIndexed,
    SubtractAExtended,
    CompareAExtended,
    SubtractWithCarryAExtended,
    AndAExtended,
    BitTestAExtended,
    LoadAExtended,
    StoreAExtended,
    XorAExtended,
    AddWithCarryAExtended,
    OrAExtended,
    AddAExtended,
    CompareIndexRegisterExtended,
    JumpToSubroutineExtended,
    LoadStackPointerExtended,
    StoreStackPointerExtended,
    SubtractBImmediate,
    CompareBImmediate,
    SubtractWithCarryBImmediate,
    AndBImmediate,
    BitTestBImmediate,
    LoadBImmediate,
    XorBImmediate,
    AddWithCarryBImmediate,
    OrBImmediate,
    AddBImmediate,
    LoadIndexRegisterImmediate,
    SubtractBDirect,
    CompareBDirect,
    SubtractWithCarryBDirect,
    AndBDirect,
    BitTestBDirect,
    LoadBDirect,
    StoreBDirect,
    XorBDirect,
    AddWithCarryBDirect,
    OrBDirect,
    AddBDirect,
    LoadIndexRegisterDirect,
    StoreIndexRegisterDirect,
    SubtractBIndexed,
    CompareBIndexed,
    SubtractWithCarryBIndexed,
    AndBIndexed,
    BitTestBIndexed,
    LoadBIndexed,
    StoreBIndexed,
    XorBIndexed,
    AddWithCarryBIndexed,
    OrBIndexed,
    AddBIndexed,
    LoadIndexRegisterIndexed,
    StoreIndexRegisterIndexed,
    SubtractBExtended,
    CompareBExtended,
    SubtractWithCarryBExtended,
    AndBExtended,
    BitTestBExtended,
    LoadBExtended,
    StoreBExtended,
    XorBExtended,
    AddWithCarryBExtended,
    OrBExtended,
    AddBExtended,
    LoadIndexRegisterExtended,
    StoreIndexRegisterExtended,
}

/// All possible operand types
#[derive(Debug, PartialEq, Eq)]
pub enum OperandType {
    AccumulatorA,
    AccumulatorB,
    IndexRegister,
    Immediate8(u8),
    Immediate16(u16),
    ConditionCodeRegister,
    StackPointer
}

/// Opcode groups that group together opcodes with different codes but similar meaning
#[derive(Debug, PartialEq, Eq)]
pub enum OpcodeGroup {
    Subtract,
    Add,
    TransferRegisters,
    Increment,
    Decrement,
    ClearFlag,
    SetFlag,
    Compare,
    Branch,
    BitwiseArithmetic,
    Load,
    Store,
    Jump,
    StackOperations,
    Misc
}

/// Addressing Mode (indexed, direct, immediate, relative, inherent, extended)
#[derive(Debug, PartialEq, Eq)]
pub enum AddressingMode {
    Inherent,
    Immediate,
    Direct,
    Extended,
    Relative,
    Indexed
}

/// Contains basic information about an opcode
#[derive(Debug)]
pub struct OpcodeInfo {
    pub opcode: Opcode,
    pub group: OpcodeGroup,
    pub instruction_length: u8,
    pub cycles: u8,
    pub addressing_mode: AddressingMode
}

/// Containts the disassembled information about an instruction
#[derive(Debug)]
pub struct InstructionInfo {
    pub opcode_info: OpcodeInfo,
    pub operands: Option<Vec<OperandType>>
}

/// Errors that can arise during disassembly
#[derive(Debug, PartialEq, Eq)]
pub enum DisassemblyError {
    InvalidOpcodeByte,
    MachineCodeTooShort
}

/// Match a byte to its disassembled opcode
///
/// # Errors
/// The function might return an InvalidOpcodeByte error if an invalid byte was given (
/// A byte that does not correspond to any opcode).
fn match_byte_to_opcode_info(byte: u8) -> Result<OpcodeInfo, DisassemblyError> {
    // TODO: One opcode for all addressing mode, probably makes group redundant
    let opcode_info: OpcodeInfo = match byte {
        0x01 => OpcodeInfo { opcode: Opcode::Nop, group: OpcodeGroup::Misc, instruction_length: 1, cycles: 1, addressing_mode: AddressingMode::Inherent },
        0x06 => OpcodeInfo { opcode: Opcode::TransferAToConditionCodes, group: OpcodeGroup::TransferRegisters, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x07 => OpcodeInfo { opcode: Opcode::TransferConditionCodesToA, group: OpcodeGroup::TransferRegisters, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x08 => OpcodeInfo { opcode: Opcode::IncrementIndexRegister, group: OpcodeGroup::Increment, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Inherent },
        0x09 => OpcodeInfo { opcode: Opcode::DecrementIndexRegister, group: OpcodeGroup::Decrement, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Inherent },
        0x0A => OpcodeInfo { opcode: Opcode::ClearOverflowFlag, group: OpcodeGroup::ClearFlag, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x0B => OpcodeInfo { opcode: Opcode::SetOverflowFlag, group: OpcodeGroup::SetFlag, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x0C => OpcodeInfo { opcode: Opcode::ClearCarryFlag, group: OpcodeGroup::ClearFlag, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x0D => OpcodeInfo { opcode: Opcode::SetCarryFlag, group: OpcodeGroup::SetFlag, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x0E => OpcodeInfo { opcode: Opcode::ClearInterruptMask, group: OpcodeGroup::ClearFlag, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x0F => OpcodeInfo { opcode: Opcode::SetInterruptMask, group: OpcodeGroup::SetFlag, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x10 => OpcodeInfo { opcode: Opcode::SubtractBFromA, group: OpcodeGroup::Subtract, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x11 => OpcodeInfo { opcode: Opcode::CompareAAndB, group: OpcodeGroup::Compare, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x16 => OpcodeInfo { opcode: Opcode::TransferAToB, group: OpcodeGroup::TransferRegisters, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x17 => OpcodeInfo { opcode: Opcode::TransferBToA, group: OpcodeGroup::TransferRegisters, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x19 => OpcodeInfo { opcode: Opcode::DecimalAdjustA, group: OpcodeGroup::TransferRegisters, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x1A => OpcodeInfo { opcode: Opcode::AddBToA, group: OpcodeGroup::Add, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x20 => OpcodeInfo { opcode: Opcode::BranchUnconditional, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative },
        0x22 => OpcodeInfo { opcode: Opcode::BranchIfHigherThan, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative },
        0x23 => OpcodeInfo { opcode: Opcode::BranchIfLowerThanEqual, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative },
        0x24 => OpcodeInfo { opcode: Opcode::BranchIfCarryClear, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative },
        0x25 => OpcodeInfo { opcode: Opcode::BranchIfCarrySet, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative },
        0x26 => OpcodeInfo { opcode: Opcode::BranchIfNotEqual, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative },
        0x27 => OpcodeInfo { opcode: Opcode::BranchIfEqual, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative },
        0x28 => OpcodeInfo { opcode: Opcode::BranchIfOverflowClear, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative },
        0x29 => OpcodeInfo { opcode: Opcode::BranchIfOverflowSet, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative },
        0x2A => OpcodeInfo { opcode: Opcode::BranchIfPlus, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative },
        0x2B => OpcodeInfo { opcode: Opcode::BranchIfMinus, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative },
        0x2C => OpcodeInfo { opcode: Opcode::BranchIfGreaterThanEqual, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative },
        0x2D => OpcodeInfo { opcode: Opcode::BranchIfLessThan, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative },
        0x2E => OpcodeInfo { opcode: Opcode::BranchIfGreaterThan, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative },
        0x2F => OpcodeInfo { opcode: Opcode::BranchIfLessThanEqaul, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Relative },
        0x30 => OpcodeInfo { opcode: Opcode::TransferStackPointerPlusOneToIndexRegister, group: OpcodeGroup::TransferRegisters, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Inherent },
        0x31 => OpcodeInfo { opcode: Opcode::IncrementStackPointer, group: OpcodeGroup::Increment, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Inherent },
        0x32 => OpcodeInfo { opcode: Opcode::PopA, group: OpcodeGroup::StackOperations, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Inherent },
        0x33 => OpcodeInfo { opcode: Opcode::PopB, group: OpcodeGroup::StackOperations, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Inherent },
        0x34 => OpcodeInfo { opcode: Opcode::DecrementStackPointer, group: OpcodeGroup::Decrement, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Inherent },
        0x35 => OpcodeInfo { opcode: Opcode::TransferIndexRegisterMinusOneToStackPointer, group: OpcodeGroup::TransferRegisters, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Inherent },
        0x36 => OpcodeInfo { opcode: Opcode::PushA, group: OpcodeGroup::StackOperations, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Inherent },
        0x37 => OpcodeInfo { opcode: Opcode::PushB, group: OpcodeGroup::StackOperations, instruction_length: 1, cycles: 4, addressing_mode: AddressingMode::Inherent },
        0x39 => OpcodeInfo { opcode: Opcode::Return, group: OpcodeGroup::Misc, instruction_length: 1, cycles: 5, addressing_mode: AddressingMode::Inherent },
        0x3B => OpcodeInfo { opcode: Opcode::ReturnFromInterrupt, group: OpcodeGroup::Misc, instruction_length: 1, cycles: 10, addressing_mode: AddressingMode::Inherent },
        0x3E => OpcodeInfo { opcode: Opcode::WaitForInterrupt, group: OpcodeGroup::Misc, instruction_length: 1, cycles: 9, addressing_mode: AddressingMode::Inherent },
        0x3F => OpcodeInfo { opcode: Opcode::SoftwareInterrupt, group: OpcodeGroup::Misc, instruction_length: 1, cycles: 12, addressing_mode: AddressingMode::Inherent },
        0x40 => OpcodeInfo { opcode: Opcode::NegateA, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x43 => OpcodeInfo { opcode: Opcode::ComplementA, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x44 => OpcodeInfo { opcode: Opcode::LogicalShiftRightA, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x46 => OpcodeInfo { opcode: Opcode::RotateRightA, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x47 => OpcodeInfo { opcode: Opcode::ArithmeticShiftRightA, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x48 => OpcodeInfo { opcode: Opcode::ArithmeticShiftLeftA, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x49 => OpcodeInfo { opcode: Opcode::RotateLeftA, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x4A => OpcodeInfo { opcode: Opcode::DecrementA, group: OpcodeGroup::Decrement, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x4C => OpcodeInfo { opcode: Opcode::IncrementA, group: OpcodeGroup::Increment, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x4D => OpcodeInfo { opcode: Opcode::TestA, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x4F => OpcodeInfo { opcode: Opcode::ClearA, group: OpcodeGroup::Misc, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x50 => OpcodeInfo { opcode: Opcode::NegateB, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x53 => OpcodeInfo { opcode: Opcode::ComplementB, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x54 => OpcodeInfo { opcode: Opcode::LogicalShiftRightB, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x56 => OpcodeInfo { opcode: Opcode::RotateRightB, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x57 => OpcodeInfo { opcode: Opcode::ArithmeticShiftRightB, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x58 => OpcodeInfo { opcode: Opcode::ArithmeticShiftLeftB, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x59 => OpcodeInfo { opcode: Opcode::RotateLeftB, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x5A => OpcodeInfo { opcode: Opcode::DecrementB, group: OpcodeGroup::Decrement, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x5C => OpcodeInfo { opcode: Opcode::IncrementB, group: OpcodeGroup::Increment, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x5D => OpcodeInfo { opcode: Opcode::TestB, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x5F => OpcodeInfo { opcode: Opcode::ClearB, group: OpcodeGroup::Misc, instruction_length: 1, cycles: 2, addressing_mode: AddressingMode::Inherent },
        0x60 => OpcodeInfo { opcode: Opcode::NegateIndexed, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed },
        0x63 => OpcodeInfo { opcode: Opcode::ComplementIndexed, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed },
        0x64 => OpcodeInfo { opcode: Opcode::LogicalShiftRightIndexed, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed },
        0x66 => OpcodeInfo { opcode: Opcode::RotateRightIndexed, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed },
        0x67 => OpcodeInfo { opcode: Opcode::ArithmeticShiftRightIndexed, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed },
        0x68 => OpcodeInfo { opcode: Opcode::ArithmeticShiftLeftIndexed, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed },
        0x69 => OpcodeInfo { opcode: Opcode::RotateLeftIndexed, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed },
        0x6A => OpcodeInfo { opcode: Opcode::DecrementIndexed, group: OpcodeGroup::Decrement, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed },
        0x6C => OpcodeInfo { opcode: Opcode::IncrementIndexed, group: OpcodeGroup::Increment, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed },
        0x6D => OpcodeInfo { opcode: Opcode::TestIndexed, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed },
        0x6E => OpcodeInfo { opcode: Opcode::JumpIndexed, group: OpcodeGroup::Jump, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Indexed },
        0x6F => OpcodeInfo { opcode: Opcode::ClearIndexed, group: OpcodeGroup::Misc, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed },
        0x70 => OpcodeInfo { opcode: Opcode::NegateExtended, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended },
        0x73 => OpcodeInfo { opcode: Opcode::ComplementExtended, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended },
        0x74 => OpcodeInfo { opcode: Opcode::LogicalShiftRightExtended, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended },
        0x76 => OpcodeInfo { opcode: Opcode::RotateRightExtended, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended },
        0x77 => OpcodeInfo { opcode: Opcode::ArithmeticShiftRightExtended, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended },
        0x78 => OpcodeInfo { opcode: Opcode::ArithmeticShiftLeftExtended, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended },
        0x79 => OpcodeInfo { opcode: Opcode::RotateLeftExtended, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended },
        0x7A => OpcodeInfo { opcode: Opcode::DecrementExtended, group: OpcodeGroup::Decrement, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended },
        0x7C => OpcodeInfo { opcode: Opcode::IncrementExtended, group: OpcodeGroup::Increment, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended },
        0x7D => OpcodeInfo { opcode: Opcode::TestExtended, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended },
        0x7E => OpcodeInfo { opcode: Opcode::JumpExtended, group: OpcodeGroup::Jump, instruction_length: 3, cycles: 3, addressing_mode: AddressingMode::Extended },
        0x7F => OpcodeInfo { opcode: Opcode::ClearExtended, group: OpcodeGroup::Misc, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended },
        0x80 => OpcodeInfo { opcode: Opcode::SubtractAImmediate, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0x81 => OpcodeInfo { opcode: Opcode::CompareAImmediate, group: OpcodeGroup::Compare, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0x82 => OpcodeInfo { opcode: Opcode::SubtractWithCarryAImmediate, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0x84 => OpcodeInfo { opcode: Opcode::AndAImmediate, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0x85 => OpcodeInfo { opcode: Opcode::BitTestAImmediate, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0x86 => OpcodeInfo { opcode: Opcode::LoadAImmediate, group: OpcodeGroup::Load, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0x88 => OpcodeInfo { opcode: Opcode::XorAImmediate, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0x89 => OpcodeInfo { opcode: Opcode::AddWithCarryAImmediate, group: OpcodeGroup::Add, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0x8A => OpcodeInfo { opcode: Opcode::OrAImmediate, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0x8B => OpcodeInfo { opcode: Opcode::AddAImmediate, group: OpcodeGroup::Add, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0x8C => OpcodeInfo { opcode: Opcode::CompareIndexRegisterImmediate, group: OpcodeGroup::Compare, instruction_length: 3, cycles: 3, addressing_mode: AddressingMode::Immediate  },
        0x8D => OpcodeInfo { opcode: Opcode::BranchToSubroutine, group: OpcodeGroup::Branch, instruction_length: 2, cycles: 8, addressing_mode: AddressingMode::Relative  },
        0x8E => OpcodeInfo { opcode: Opcode::LoadStackPointerImmediate, group: OpcodeGroup::Load, instruction_length: 3, cycles: 3, addressing_mode: AddressingMode::Immediate  },
        0x90 => OpcodeInfo { opcode: Opcode::SubtractADirect, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0x91 => OpcodeInfo { opcode: Opcode::CompareADirect, group: OpcodeGroup::Compare, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0x92 => OpcodeInfo { opcode: Opcode::SubtractWithCarryADirect, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0x94 => OpcodeInfo { opcode: Opcode::AndADirect, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0x95 => OpcodeInfo { opcode: Opcode::BitTestADirect, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0x96 => OpcodeInfo { opcode: Opcode::LoadADirect, group: OpcodeGroup::Load, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0x97 => OpcodeInfo { opcode: Opcode::StoreADirect, group: OpcodeGroup::Store, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Direct  },
        0x98 => OpcodeInfo { opcode: Opcode::XorADirect, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0x99 => OpcodeInfo { opcode: Opcode::AddWithCarryADirect, group: OpcodeGroup::Add, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0x9A => OpcodeInfo { opcode: Opcode::OrADirect, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0x9B => OpcodeInfo { opcode: Opcode::AddADirect, group: OpcodeGroup::Add, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0x9C => OpcodeInfo { opcode: Opcode::CompareIndexRegisterDirect, group: OpcodeGroup::Compare, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Direct  },
        0x9E => OpcodeInfo { opcode: Opcode::LoadStackPointerDirect, group: OpcodeGroup::Load, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Direct  },
        0x9F => OpcodeInfo { opcode: Opcode::StoreStackPointerDirect, group: OpcodeGroup::Store, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Direct  },
        0xA0 => OpcodeInfo { opcode: Opcode::SubtractAIndexed, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xA1 => OpcodeInfo { opcode: Opcode::CompareAIndexed, group: OpcodeGroup::Compare, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xA2 => OpcodeInfo { opcode: Opcode::SubtractWithCarryAIndexed, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xA4 => OpcodeInfo { opcode: Opcode::AndAIndexed, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xA5 => OpcodeInfo { opcode: Opcode::BitTestAIndexed, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xA6 => OpcodeInfo { opcode: Opcode::LoadAIndexed, group: OpcodeGroup::Load, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xA7 => OpcodeInfo { opcode: Opcode::StoreAIndexed, group: OpcodeGroup::Store, instruction_length: 2, cycles: 6, addressing_mode: AddressingMode::Indexed  },
        0xA8 => OpcodeInfo { opcode: Opcode::XorAIndexed, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xA9 => OpcodeInfo { opcode: Opcode::AddWithCarryAIndexed, group: OpcodeGroup::Add, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xAA => OpcodeInfo { opcode: Opcode::OrAIndexed, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xAB => OpcodeInfo { opcode: Opcode::AddAIndexed, group: OpcodeGroup::Add, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xAC => OpcodeInfo { opcode: Opcode::CompareIndexRegisterIndexed, group: OpcodeGroup::Compare, instruction_length: 2, cycles: 6, addressing_mode: AddressingMode::Indexed  },
        0xAD => OpcodeInfo { opcode: Opcode::JumpToSubroutineIndexed, group: OpcodeGroup::Jump, instruction_length: 2, cycles: 8, addressing_mode: AddressingMode::Indexed  },
        0xAE => OpcodeInfo { opcode: Opcode::LoadStackPointerIndexed, group: OpcodeGroup::Load, instruction_length: 2, cycles: 6, addressing_mode: AddressingMode::Indexed  },
        0xAF => OpcodeInfo { opcode: Opcode::StoreStackPointerIndexed, group: OpcodeGroup::Store, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed  },
        0xB0 => OpcodeInfo { opcode: Opcode::SubtractAExtended, group: OpcodeGroup::Subtract, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xB1 => OpcodeInfo { opcode: Opcode::CompareAExtended, group: OpcodeGroup::Compare, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xB2 => OpcodeInfo { opcode: Opcode::SubtractWithCarryAExtended, group: OpcodeGroup::Subtract, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xB4 => OpcodeInfo { opcode: Opcode::AndAExtended, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xB5 => OpcodeInfo { opcode: Opcode::BitTestAExtended, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xB6 => OpcodeInfo { opcode: Opcode::LoadAExtended, group: OpcodeGroup::Load, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xB7 => OpcodeInfo { opcode: Opcode::StoreAExtended, group: OpcodeGroup::Store, instruction_length: 3, cycles: 5, addressing_mode: AddressingMode::Extended  },
        0xB8 => OpcodeInfo { opcode: Opcode::XorAExtended, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xB9 => OpcodeInfo { opcode: Opcode::AddWithCarryAExtended, group: OpcodeGroup::Add, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xBA => OpcodeInfo { opcode: Opcode::OrAExtended, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xBB => OpcodeInfo { opcode: Opcode::AddAExtended, group: OpcodeGroup::Add, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xBC => OpcodeInfo { opcode: Opcode::CompareIndexRegisterExtended, group: OpcodeGroup::Compare, instruction_length: 3, cycles: 5, addressing_mode: AddressingMode::Extended  },
        0xBD => OpcodeInfo { opcode: Opcode::JumpToSubroutineExtended, group: OpcodeGroup::Jump, instruction_length: 3, cycles: 9, addressing_mode: AddressingMode::Extended  },
        0xBE => OpcodeInfo { opcode: Opcode::LoadStackPointerExtended, group: OpcodeGroup::Load, instruction_length: 3, cycles: 5, addressing_mode: AddressingMode::Extended  },
        0xBF => OpcodeInfo { opcode: Opcode::StoreStackPointerExtended, group: OpcodeGroup::Store, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended  },
        0xC0 => OpcodeInfo { opcode: Opcode::SubtractBImmediate, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0xC1 => OpcodeInfo { opcode: Opcode::CompareBImmediate, group: OpcodeGroup::Compare, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0xC2 => OpcodeInfo { opcode: Opcode::SubtractWithCarryBImmediate, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0xC4 => OpcodeInfo { opcode: Opcode::AndBImmediate, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0xC5 => OpcodeInfo { opcode: Opcode::BitTestBImmediate, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0xC6 => OpcodeInfo { opcode: Opcode::LoadBImmediate, group: OpcodeGroup::Load, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0xC8 => OpcodeInfo { opcode: Opcode::XorBImmediate, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0xC9 => OpcodeInfo { opcode: Opcode::AddWithCarryBImmediate, group: OpcodeGroup::Add, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0xCA => OpcodeInfo { opcode: Opcode::OrBImmediate, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0xCB => OpcodeInfo { opcode: Opcode::AddBImmediate, group: OpcodeGroup::Add, instruction_length: 2, cycles: 2, addressing_mode: AddressingMode::Immediate  },
        0xCE => OpcodeInfo { opcode: Opcode::LoadIndexRegisterImmediate, group: OpcodeGroup::Load, instruction_length: 3, cycles: 3, addressing_mode: AddressingMode::Immediate  },
        0xD0 => OpcodeInfo { opcode: Opcode::SubtractBDirect, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0xD1 => OpcodeInfo { opcode: Opcode::CompareBDirect, group: OpcodeGroup::Compare, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0xD2 => OpcodeInfo { opcode: Opcode::SubtractWithCarryBDirect, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0xD4 => OpcodeInfo { opcode: Opcode::AndBDirect, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0xD5 => OpcodeInfo { opcode: Opcode::BitTestBDirect, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0xD6 => OpcodeInfo { opcode: Opcode::LoadBDirect, group: OpcodeGroup::Load, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0xD7 => OpcodeInfo { opcode: Opcode::StoreBDirect, group: OpcodeGroup::Store, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Direct  },
        0xD8 => OpcodeInfo { opcode: Opcode::XorBDirect, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0xD9 => OpcodeInfo { opcode: Opcode::AddWithCarryBDirect, group: OpcodeGroup::Add, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0xDA => OpcodeInfo { opcode: Opcode::OrBDirect, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0xDB => OpcodeInfo { opcode: Opcode::AddBDirect, group: OpcodeGroup::Add, instruction_length: 2, cycles: 3, addressing_mode: AddressingMode::Direct  },
        0xDE => OpcodeInfo { opcode: Opcode::LoadIndexRegisterDirect, group: OpcodeGroup::Load, instruction_length: 2, cycles: 4, addressing_mode: AddressingMode::Direct  },
        0xDF => OpcodeInfo { opcode: Opcode::StoreIndexRegisterDirect, group: OpcodeGroup::Store, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Direct  },
        0xE0 => OpcodeInfo { opcode: Opcode::SubtractBIndexed, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xE1 => OpcodeInfo { opcode: Opcode::CompareBIndexed, group: OpcodeGroup::Compare, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xE2 => OpcodeInfo { opcode: Opcode::SubtractWithCarryBIndexed, group: OpcodeGroup::Subtract, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xE4 => OpcodeInfo { opcode: Opcode::AndBIndexed, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xE5 => OpcodeInfo { opcode: Opcode::BitTestBIndexed, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xE6 => OpcodeInfo { opcode: Opcode::LoadBIndexed, group: OpcodeGroup::Load, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xE7 => OpcodeInfo { opcode: Opcode::StoreBIndexed, group: OpcodeGroup::Store, instruction_length: 2, cycles: 6, addressing_mode: AddressingMode::Indexed  },
        0xE8 => OpcodeInfo { opcode: Opcode::XorBIndexed, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xE9 => OpcodeInfo { opcode: Opcode::AddWithCarryBIndexed, group: OpcodeGroup::Add, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xEA => OpcodeInfo { opcode: Opcode::OrBIndexed, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xEB => OpcodeInfo { opcode: Opcode::AddBIndexed, group: OpcodeGroup::Add, instruction_length: 2, cycles: 5, addressing_mode: AddressingMode::Indexed  },
        0xEE => OpcodeInfo { opcode: Opcode::LoadIndexRegisterIndexed, group: OpcodeGroup::Load, instruction_length: 2, cycles: 6, addressing_mode: AddressingMode::Indexed  },
        0xEF => OpcodeInfo { opcode: Opcode::StoreIndexRegisterIndexed, group: OpcodeGroup::Store, instruction_length: 2, cycles: 7, addressing_mode: AddressingMode::Indexed  },
        0xF0 => OpcodeInfo { opcode: Opcode::SubtractBExtended, group: OpcodeGroup::Subtract, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Inherent  },
        0xF1 => OpcodeInfo { opcode: Opcode::CompareBExtended, group: OpcodeGroup::Compare, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xF2 => OpcodeInfo { opcode: Opcode::SubtractWithCarryBExtended, group: OpcodeGroup::Subtract, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xF4 => OpcodeInfo { opcode: Opcode::AndBExtended, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xF5 => OpcodeInfo { opcode: Opcode::BitTestBExtended, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xF6 => OpcodeInfo { opcode: Opcode::LoadBExtended, group: OpcodeGroup::Load, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xF7 => OpcodeInfo { opcode: Opcode::StoreBExtended, group: OpcodeGroup::Store, instruction_length: 3, cycles: 5, addressing_mode: AddressingMode::Extended  },
        0xF8 => OpcodeInfo { opcode: Opcode::XorBExtended, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xF9 => OpcodeInfo { opcode: Opcode::AddWithCarryBExtended, group: OpcodeGroup::Add, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xFA => OpcodeInfo { opcode: Opcode::OrBExtended, group: OpcodeGroup::BitwiseArithmetic, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xFB => OpcodeInfo { opcode: Opcode::AddBExtended, group: OpcodeGroup::Add, instruction_length: 3, cycles: 4, addressing_mode: AddressingMode::Extended  },
        0xFE => OpcodeInfo { opcode: Opcode::LoadIndexRegisterExtended, group: OpcodeGroup::Load, instruction_length: 3, cycles: 5, addressing_mode: AddressingMode::Extended  },
        0xFF => OpcodeInfo { opcode: Opcode::StoreIndexRegisterExtended, group: OpcodeGroup::Store, instruction_length: 3, cycles: 6, addressing_mode: AddressingMode::Extended  },
        _ => return Err(DisassemblyError::InvalidOpcodeByte)
    };

    Ok(opcode_info)
}

fn disassemble_operands(opcode_info: &OpcodeInfo, data: &[u8]) -> Option<Vec<OperandType>> {
    let mut operand8: OperandType = OperandType::Immediate8(0);
    let mut operand16: OperandType = OperandType::Immediate16(0);

    if data.len() > 1 {
        operand8 = OperandType::Immediate8(data[1]);
    } 
    if data.len() > 2 {
        operand16 = OperandType::Immediate16(((data[1] as u16) << 8) | (data[2] as u16));
    }

    let operands = match opcode_info.opcode {
        Opcode::Nop => None,
        Opcode::TransferAToConditionCodes => Some(vec![OperandType::AccumulatorA, OperandType::ConditionCodeRegister]),
        Opcode::TransferConditionCodesToA => Some(vec![OperandType::ConditionCodeRegister, OperandType::AccumulatorA]),
        Opcode::IncrementIndexRegister => Some(vec![OperandType::IndexRegister]),
        Opcode::DecrementIndexRegister => Some(vec![OperandType::IndexRegister]),
        Opcode::ClearOverflowFlag => None,
        Opcode::SetOverflowFlag => None,
        Opcode::ClearCarryFlag => None,
        Opcode::SetCarryFlag => None,
        Opcode::ClearInterruptMask => None,
        Opcode::SetInterruptMask => None,
        Opcode::SubtractBFromA => Some(vec![OperandType::AccumulatorA, OperandType::AccumulatorB]),
        Opcode::CompareAAndB => Some(vec![OperandType::AccumulatorA, OperandType::AccumulatorB]),
        Opcode::TransferAToB => Some(vec![OperandType::AccumulatorA, OperandType::AccumulatorB]),
        Opcode::TransferBToA => Some(vec![OperandType::AccumulatorB, OperandType::AccumulatorA]),
        Opcode::DecimalAdjustA => None,
        Opcode::AddBToA => Some(vec![OperandType::AccumulatorA, OperandType::AccumulatorB]),
        Opcode::BranchUnconditional => Some(vec![operand8]),
        Opcode::BranchIfHigherThan => Some(vec![operand8]),
        Opcode::BranchIfLessThanEqaul => Some(vec![operand8]),
        Opcode::BranchIfCarryClear => Some(vec![operand8]),
        Opcode::BranchIfCarrySet => Some(vec![operand8]),
        Opcode::BranchIfNotEqual => Some(vec![operand8]),
        Opcode::BranchIfEqual => Some(vec![operand8]),
        Opcode::BranchIfOverflowClear => Some(vec![operand8]),
        Opcode::BranchIfOverflowSet => Some(vec![operand8]),
        Opcode::BranchIfPlus => Some(vec![operand8]),
        Opcode::BranchIfMinus => Some(vec![operand8]),
        Opcode::BranchIfGreaterThanEqual => Some(vec![operand8]),
        Opcode::BranchIfLessThan => Some(vec![operand8]),
        Opcode::BranchIfGreaterThan => Some(vec![operand8]),
        Opcode::BranchIfLowerThanEqual => Some(vec![operand8]),
        Opcode::TransferStackPointerPlusOneToIndexRegister => Some(vec![OperandType::IndexRegister, OperandType::StackPointer]),
        Opcode::IncrementStackPointer => Some(vec![OperandType::StackPointer]),
        Opcode::PopA => Some(vec![OperandType::AccumulatorA]),
        Opcode::PopB => Some(vec![OperandType::AccumulatorB]),
        Opcode::DecrementStackPointer => Some(vec![OperandType::StackPointer]),
        Opcode::TransferIndexRegisterMinusOneToStackPointer => Some(vec![OperandType::StackPointer, OperandType::IndexRegister]),
        Opcode::PushA => Some(vec![OperandType::AccumulatorA]),
        Opcode::PushB => Some(vec![OperandType::AccumulatorB]),
        Opcode::Return => None,
        Opcode::ReturnFromInterrupt => None,
        Opcode::WaitForInterrupt => None,
        Opcode::SoftwareInterrupt => None,
        Opcode::NegateA => Some(vec![OperandType::AccumulatorA]),
        Opcode::ComplementA => Some(vec![OperandType::AccumulatorA]),
        Opcode::LogicalShiftRightA => Some(vec![OperandType::AccumulatorA]),
        Opcode::RotateRightA => Some(vec![OperandType::AccumulatorA]),
        Opcode::ArithmeticShiftRightA => Some(vec![OperandType::AccumulatorA]),
        Opcode::ArithmeticShiftLeftA => Some(vec![OperandType::AccumulatorA]),
        Opcode::RotateLeftA => Some(vec![OperandType::AccumulatorA]),
        Opcode::DecrementA => Some(vec![OperandType::AccumulatorA]),
        Opcode::IncrementA => Some(vec![OperandType::AccumulatorA]),
        Opcode::TestA => Some(vec![OperandType::AccumulatorA]),
        Opcode::ClearA => Some(vec![OperandType::AccumulatorA]),
        Opcode::NegateB => Some(vec![OperandType::AccumulatorB]),
        Opcode::ComplementB => Some(vec![OperandType::AccumulatorB]),
        Opcode::LogicalShiftRightB => Some(vec![OperandType::AccumulatorB]),
        Opcode::RotateRightB => Some(vec![OperandType::AccumulatorB]),
        Opcode::ArithmeticShiftRightB => Some(vec![OperandType::AccumulatorB]),
        Opcode::ArithmeticShiftLeftB => Some(vec![OperandType::AccumulatorB]),
        Opcode::RotateLeftB => Some(vec![OperandType::AccumulatorB]),
        Opcode::DecrementB => Some(vec![OperandType::AccumulatorB]),
        Opcode::IncrementB => Some(vec![OperandType::AccumulatorB]),
        Opcode::TestB => Some(vec![OperandType::AccumulatorB]),
        Opcode::ClearB => Some(vec![OperandType::AccumulatorB]),
        Opcode::NegateIndexed => Some(vec![operand8]),
        Opcode::ComplementIndexed => Some(vec![operand8]),
        Opcode::LogicalShiftRightIndexed => Some(vec![operand8]),
        Opcode::RotateRightIndexed => Some(vec![operand8]),
        Opcode::ArithmeticShiftRightIndexed => Some(vec![operand8]),
        Opcode::ArithmeticShiftLeftIndexed => Some(vec![operand8]),
        Opcode::RotateLeftIndexed => Some(vec![operand8]),
        Opcode::DecrementIndexed => Some(vec![operand8]),
        Opcode::IncrementIndexed => Some(vec![operand8]),
        Opcode::TestIndexed => Some(vec![operand8]),
        Opcode::JumpIndexed => Some(vec![operand8]),
        Opcode::ClearIndexed => Some(vec![operand8]),
        Opcode::NegateExtended => Some(vec![operand16]),
        Opcode::ComplementExtended => Some(vec![operand16]),
        Opcode::LogicalShiftRightExtended => Some(vec![operand16]),
        Opcode::RotateRightExtended => Some(vec![operand16]),
        Opcode::ArithmeticShiftRightExtended => Some(vec![operand16]),
        Opcode::ArithmeticShiftLeftExtended => Some(vec![operand16]),
        Opcode::RotateLeftExtended => Some(vec![operand16]),
        Opcode::DecrementExtended => Some(vec![operand16]),
        Opcode::IncrementExtended => Some(vec![operand16]),
        Opcode::TestExtended => Some(vec![operand16]),
        Opcode::JumpExtended => Some(vec![operand16]),
        Opcode::ClearExtended => Some(vec![operand16]),
        Opcode::SubtractAImmediate => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::CompareAImmediate => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::SubtractWithCarryAImmediate => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::AndAImmediate => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::BitTestAImmediate => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::LoadAImmediate => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::XorAImmediate => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::AddWithCarryAImmediate => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::OrAImmediate => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::AddAImmediate => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::CompareIndexRegisterImmediate => Some(vec![OperandType::IndexRegister, operand16]),
        Opcode::BranchToSubroutine => Some(vec![operand8]),
        Opcode::LoadStackPointerImmediate => Some(vec![OperandType::StackPointer, operand16]),
        Opcode::SubtractADirect => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::CompareADirect => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::SubtractWithCarryADirect => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::AndADirect => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::BitTestADirect => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::LoadADirect => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::StoreADirect => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::XorADirect => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::AddWithCarryADirect => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::OrADirect => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::AddADirect => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::CompareIndexRegisterDirect => Some(vec![OperandType::IndexRegister, operand16]),
        Opcode::LoadStackPointerDirect => Some(vec![OperandType::StackPointer, operand8]),
        Opcode::StoreStackPointerDirect => Some(vec![OperandType::StackPointer, operand8]),
        Opcode::SubtractAIndexed => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::CompareAIndexed => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::SubtractWithCarryAIndexed => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::AndAIndexed => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::BitTestAIndexed => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::LoadAIndexed => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::StoreAIndexed => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::XorAIndexed => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::AddWithCarryAIndexed => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::OrAIndexed => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::AddAIndexed => Some(vec![OperandType::AccumulatorA, operand8]),
        Opcode::CompareIndexRegisterIndexed => Some(vec![OperandType::IndexRegister, operand8]),
        Opcode::JumpToSubroutineIndexed => Some(vec![operand8]),
        Opcode::LoadStackPointerIndexed => Some(vec![OperandType::StackPointer, operand8]),
        Opcode::StoreStackPointerIndexed => Some(vec![OperandType::StackPointer, operand8]),
        Opcode::SubtractAExtended => Some(vec![OperandType::AccumulatorA, operand16]),
        Opcode::CompareAExtended => Some(vec![OperandType::AccumulatorA, operand16]),
        Opcode::SubtractWithCarryAExtended => Some(vec![OperandType::AccumulatorA, operand16]),
        Opcode::AndAExtended => Some(vec![OperandType::AccumulatorA, operand16]),
        Opcode::BitTestAExtended => Some(vec![OperandType::AccumulatorA, operand16]),
        Opcode::LoadAExtended => Some(vec![OperandType::AccumulatorA, operand16]),
        Opcode::StoreAExtended => Some(vec![OperandType::AccumulatorA, operand16]),
        Opcode::XorAExtended => Some(vec![OperandType::AccumulatorA, operand16]),
        Opcode::AddWithCarryAExtended => Some(vec![OperandType::AccumulatorA, operand16]),
        Opcode::OrAExtended => Some(vec![OperandType::AccumulatorA, operand16]),
        Opcode::AddAExtended => Some(vec![OperandType::AccumulatorA, operand16]),
        Opcode::CompareIndexRegisterExtended => Some(vec![OperandType::IndexRegister, operand16]),
        Opcode::JumpToSubroutineExtended => Some(vec![operand16]),
        Opcode::LoadStackPointerExtended => Some(vec![OperandType::StackPointer, operand16]),
        Opcode::StoreStackPointerExtended => Some(vec![OperandType::StackPointer, operand16]),
        Opcode::SubtractBImmediate => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::CompareBImmediate => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::SubtractWithCarryBImmediate => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::AndBImmediate => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::BitTestBImmediate => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::LoadBImmediate => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::XorBImmediate => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::AddWithCarryBImmediate => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::OrBImmediate => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::AddBImmediate => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::LoadIndexRegisterImmediate => Some(vec![OperandType::IndexRegister, operand16]),
        Opcode::SubtractBDirect => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::CompareBDirect => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::SubtractWithCarryBDirect => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::AndBDirect => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::BitTestBDirect => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::LoadBDirect => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::StoreBDirect => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::XorBDirect => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::AddWithCarryBDirect => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::OrBDirect => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::AddBDirect => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::LoadIndexRegisterDirect => Some(vec![OperandType::IndexRegister, operand8]),
        Opcode::StoreIndexRegisterDirect => Some(vec![OperandType::IndexRegister, operand8]),
        Opcode::SubtractBIndexed => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::CompareBIndexed => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::SubtractWithCarryBIndexed => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::AndBIndexed => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::BitTestBIndexed => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::LoadBIndexed => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::StoreBIndexed => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::XorBIndexed => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::AddWithCarryBIndexed => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::OrBIndexed => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::AddBIndexed => Some(vec![OperandType::AccumulatorB, operand8]),
        Opcode::LoadIndexRegisterIndexed => Some(vec![OperandType::IndexRegister, operand8]),
        Opcode::StoreIndexRegisterIndexed => Some(vec![OperandType::IndexRegister, operand8]),
        Opcode::SubtractBExtended => Some(vec![OperandType::AccumulatorB, operand16]),
        Opcode::CompareBExtended => Some(vec![OperandType::AccumulatorB, operand16]),
        Opcode::SubtractWithCarryBExtended => Some(vec![OperandType::AccumulatorB, operand16]),
        Opcode::AndBExtended => Some(vec![OperandType::AccumulatorB, operand16]),
        Opcode::BitTestBExtended => Some(vec![OperandType::AccumulatorB, operand16]),
        Opcode::LoadBExtended => Some(vec![OperandType::AccumulatorB, operand16]),
        Opcode::StoreBExtended => Some(vec![OperandType::AccumulatorB, operand16]),
        Opcode::XorBExtended => Some(vec![OperandType::AccumulatorB, operand16]),
        Opcode::AddWithCarryBExtended => Some(vec![OperandType::AccumulatorB, operand16]),
        Opcode::OrBExtended => Some(vec![OperandType::AccumulatorB, operand16]),
        Opcode::AddBExtended => Some(vec![OperandType::AccumulatorB, operand16]),
        Opcode::LoadIndexRegisterExtended => Some(vec![OperandType::IndexRegister, operand16]),
        Opcode::StoreIndexRegisterExtended => Some(vec![OperandType::IndexRegister, operand16]),
    };

    operands
}

/// Disassemble the next instruction in a byte stream
pub fn disassemble_instruction(data: &[u8]) -> Result<InstructionInfo, DisassemblyError> {
    let opcode_info = match data.len() {
        0 => return Err(DisassemblyError::MachineCodeTooShort),
        _ => match_byte_to_opcode_info(data[0])
    };
    
    let opcode_info = match opcode_info {
        Ok(info) => info,
        Err(err) => return Err(err)
    };

    // Return an error if data is too short for operands
    if data.len() < opcode_info.instruction_length as usize {
        return Err(DisassemblyError::MachineCodeTooShort);
    }

    let operands = disassemble_operands(&opcode_info, data); 

    Ok(InstructionInfo { opcode_info, operands })
}
